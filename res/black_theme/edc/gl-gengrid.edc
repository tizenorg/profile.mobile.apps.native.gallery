/*
* Copyright (c) 2000-2015 Samsung Electronics Co., Ltd All Rights Reserved
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/

//////////Copied from scroller.edc//////////////////////

sounds {
	sample {
		name: "touch_sound" RAW;
		source: "button-pressed.wav";
	}
}

#define GL_GENGRID_OVER(to_obj) \
	part { name: "over_"to_obj; \
		type: RECT; \
		repeat_events: 1; \
		ignore_flags: ON_HOLD; \
		description { \
			state: "default" 0.0; \
			color: 0 0 0 0; \
			rel1 { relative: 0.0 0.0; to: to_obj; }\
			rel2 { relative: 1.0 1.0; to: to_obj; }\
		} \
	}

#define GL_GENGRID_OVER_SOUND(src) \
	program { name: src"_mouse_clicked"; \
		signal: "mouse,clicked,1"; \
		source: "over_"src; \
		transition: DECELERATE 0.2; \
		after: "touch_snd"; \
	}

#define GL_GENGRID_SOUND(src) \
	program { name: src"_mouse_clicked"; \
		signal: "mouse,clicked,1"; \
		source: src; \
		transition: DECELERATE 0.2; \
		after: "touch_snd"; \
	}

#define GL_GENGRID_PLARY_SOUND \
	program { name: "touch_snd"; \
		action: RUN_PLUGIN "touch_sound_plugin"; \
	}

#define GL_GENGRID_FOCUS_BG \
	part { name: "focus_bg"; \
		type: IMAGE; \
		mouse_events: 1; \
		repeat_events: 1; \
		description { state: "default" 0.0; \
			visible: 0; \
			image.normal: GALLERY_EDC_IMAGE_THUMBS_BG_FOCUS; \
			image.border: 13 13 13 13; \
		} \
		description { state: "enabled" 0.0; \
			inherit: "default" 0.0; \
			visible: 1; \
		} \
	}

#define GL_GENGRID_FOCUS_EVENT(to_obj) \
	part { name: "focus_event"; \
		type: RECT; \
		mouse_events: 1; \
		repeat_events: 1; \
		description { \
			state: "default" 0.0; \
			color: 0 0 0 0; \
			rel1 { relative: 0.0 0.0; to: to_obj; }\
			rel2 { relative: 1.0 1.0; to: to_obj; }\
		} \
	}

#define GL_GENGRID_FOCUS(src) \
	program { \
		name: "go_mouse_down_"src; \
		signal: "mouse,down,1"; \
		source: src; \
		action: STATE_SET "enabled" 0.0; \
		target: "focus_bg"; \
		transition: ACCELERATE 0.2; \
	} \
	program { \
		name: "go_mouse_up_"src; \
		signal: "mouse,up,1"; \
		source: src; \
		action: STATE_SET "default" 0.0; \
		target: "focus_bg"; \
		transition: DECELERATE 0.2; \
	} \
	program { name: "focus_in"; \
		signal: "elm,state,focused"; \
		source: "elm"; \
		action: STATE_SET "enabled" 0.0; \
		target: "focus_bg"; \
	} \
	program { name: "focus_out"; \
		signal: "elm,state,unfocused"; \
		source: "elm"; \
		action: STATE_SET "default" 0.0; \
		target: "focus_bg"; \
	}

#define SCROLLER_DEFAULT_SCROLLBAR_VBAR_IMAGE "00_scroll_bar.png"
#define SCROLLER_DEFAULT_SCROLLBAR_HBAR_IMAGE "00_scroll_bar.png"
#define SCROLLER_DEFAULT_SCROLLBAR_VBAR_IMAGE_BORDER 5 10 5 10
#define SCROLLER_DEFAULT_SCROLLBAR_HBAR_IMAGE_BORDER 5 10 5 10
#define SCROLLER_DEFAULT_SCROLLBAR_VBAR_MIN_SIZE_INC 16 238
#define SCROLLER_DEFAULT_SCROLLBAR_VBAR_MAX_SIZE_INC 16 99999
#define SCROLLER_DEFAULT_SCROLLBAR_HBAR_MIN_SIZE_INC 208 16
#define SCROLLER_DEFAULT_SCROLLBAR_HBAR_MAX_SIZE_INC 99999 16
#define SCROLLER_DEFAULT_SCROLLBAR_VBAR_PADDING_SIZE 6
#define SCROLLER_DEFAULT_SCROLLBAR_HBAR_PADDING_SIZE 6

/*
 * vim:ts=3
*/
group { name: "elm/scroller/base/gallery";

   data {
      item: "focus_highlight" "on";
   }

   script {
      public sbvis_v, sbvis_h, sbalways_v, sbalways_h, sbvis_timer;
      public sh_v, sh_h, sh_timer, edge_timer;
      public timer0(val) {
         new v;
         v = get_int(sbvis_v);
         if (v) {
            v = get_int(sbalways_v);
            if (!v) {
               emit("do-hide-vbar", "");
               set_int(sbvis_v, 0);
            }
         }
         v = get_int(sbvis_h);
         if (v) {
            v = get_int(sbalways_h);
            if (!v) {
               emit("do-hide-hbar", "");
               set_int(sbvis_h, 0);
            }
         }
         set_int(sbvis_timer, 0);
         return 0;
      }
      public timer1(val) {
         emit("do-hide-vshadow", "");
         emit("do-hide-hshadow", "");
         set_int(sh_timer, 0);
         return 0;
      }
      public timer2(val) {
         emit("do-hide-vshadow", "");
         emit("do-hide-hshadow", "");
         set_int(edge_timer, 0);
         return 0;
      }
   }
   images {
      image: SCROLLER_DEFAULT_SCROLLBAR_VBAR_IMAGE COMP;
      image: SCROLLER_DEFAULT_SCROLLBAR_HBAR_IMAGE COMP;
   }
   parts {
      part { name: "bg";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.offset: 0 0;
            rel2.offset: -1 -1;
            color: 255 255 255 0;
         }
      }
      part { name: "clipper";
         type: RECT;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
            rel1.offset: 0 0;
            rel2.offset: -1 -1;
         }
      }
      part { name: "elm.swallow.content";
         clip_to: "clipper";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
            rel1.offset: 0 0;
            rel2.offset: -1 -1;
         }
      }
      part { name: "sb_vbar_clip_master";
         type: RECT;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
         }
         description { state: "hidden" 0.0;
            visible: 0;
            color: 255 255 255 0;
         }
      }
      part { name: "sb_vbar_clip";
         clip_to: "sb_vbar_clip_master";
         type: RECT;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
         }
         description { state: "hidden" 0.0;
            visible: 0;
            color: 255 255 255 0;
         }
      }
      part { name: "sb_vbar";
         type: RECT;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            visible: 0;
            min: SCROLLER_DEFAULT_SCROLLBAR_VBAR_MIN_SIZE_INC;
            align: 1.0 0.0;
            rel1 {
               relative: 1.0 0.0;
               offset:   0 0;
               to_y:     "elm.swallow.content";
               to_x:     "elm.swallow.content";
            }
            rel2 {
               relative: 1.0 1.0;
               offset:   -1 1;
               to_y:     "elm.swallow.content";
               to_x:     "elm.swallow.content";
            }
         }
      }
      part { name: "elm.dragable.vbar";
         clip_to: "sb_vbar_clip";
         mouse_events: 0;
         scale: 1;
         dragable {
            x: 0 0 0;
            y: 1 1 0;
            confine: "sb_vbar";
         }
         description { state: "default" 0.0;
            fixed: 1 1;
            min: SCROLLER_DEFAULT_SCROLLBAR_VBAR_MIN_SIZE_INC;
            max: SCROLLER_DEFAULT_SCROLLBAR_VBAR_MAX_SIZE_INC;
            rel1 {
               relative: 0.5  0.5;
               offset:   0    0;
               to: "sb_vbar";
            }
            rel2 {
               relative: 0.5  0.5;
               offset:   0    0;
               to: "sb_vbar";
            }
            image {
               normal: SCROLLER_DEFAULT_SCROLLBAR_VBAR_IMAGE;
               border: SCROLLER_DEFAULT_SCROLLBAR_VBAR_IMAGE_BORDER;
               border_scale: 1;
               middle: DEFAULT;
            }
         }
      }
      part { name: "sb_hbar_clip_master";
         type: RECT;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
         }
         description { state: "hidden" 0.0;
            visible: 0;
            color: 255 255 255 0;
         }
      }
      part { name: "sb_hbar_clip";
         clip_to: "sb_hbar_clip_master";
         type: RECT;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
         }
         description { state: "hidden" 0.0;
            visible: 0;
            color: 255 255 255 0;
         }
      }
      part { name: "sb_hbar";
         type: RECT;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            visible: 0;
            min: SCROLLER_DEFAULT_SCROLLBAR_HBAR_MIN_SIZE_INC;
            align: 0.0 1.0;
            rel1 {
               relative: 0.0 1.0;
               offset:   0 0;
               to_x:     "elm.swallow.content";
               to_y:     "elm.swallow.content";
            }
            rel2 {
               relative: 1.0 1.0;
               offset:   -1 -1;
               to_x:     "elm.swallow.content";
               to_y:     "elm.swallow.content";
            }
         }
      }
      part { name: "elm.dragable.hbar";
         clip_to: "sb_hbar_clip";
         mouse_events: 0;
         scale: 1;
         dragable {
            x: 1 1 0;
            y: 0 0 0;
            confine: "sb_hbar";
         }
         description { state: "default" 0.0;
            fixed: 1 1;
            min: SCROLLER_DEFAULT_SCROLLBAR_HBAR_MIN_SIZE_INC;
            max: SCROLLER_DEFAULT_SCROLLBAR_HBAR_MAX_SIZE_INC;
            rel1 {
               relative: 0.5  0.5;
               offset:   0    0;
               to: "sb_hbar";
            }
            rel2 {
               relative: 0.5  0.5;
               offset:   0    0;
               to: "sb_hbar";
            }
            image {
               normal: SCROLLER_DEFAULT_SCROLLBAR_HBAR_IMAGE;
               border: SCROLLER_DEFAULT_SCROLLBAR_HBAR_IMAGE_BORDER;
               border_scale: 1;
               middle: DEFAULT;
            }
         }
      }
      part { name: "disabler";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "clipper";
            rel2.to: "clipper";
            color: 0 0 0 0;
            visible: 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            color: 128 128 128 128;
         }
      }
   }
   programs {
      program { name: "load";
         signal: "load";
         source: "";
         script {
            set_state(PART:"sb_hbar_clip", "hidden", 0.0);
            set_state(PART:"sb_vbar_clip", "hidden", 0.0);
            set_int(sbvis_h, 0);
            set_int(sbvis_v, 0);
            set_int(sbalways_v, 0);
            set_int(sbalways_h, 0);
            set_int(sbvis_timer, 0);
         }
      }

      program { name: "vbar_show";
         signal: "elm,action,show,vbar";
         source: "elm";
         action:  STATE_SET "default" 0.0;
         target: "sb_vbar_clip_master";
      }
      program { name: "vbar_hide";
         signal: "elm,action,hide,vbar";
         source: "elm";
         action:  STATE_SET "hidden" 0.0;
         target: "sb_vbar_clip_master";
      }
      program { name: "vbar_show_always";
         signal: "elm,action,show_always,vbar";
         source: "elm";
         script {
            new v;
            v = get_int(sbvis_v);
            v |= get_int(sbalways_v);
            if (!v) {
               set_int(sbalways_v, 1);
               emit("do-show-vbar", "");
               set_int(sbvis_v, 1);
            }
         }
      }
      program { name: "vbar_show_notalways";
         signal: "elm,action,show_notalways,vbar";
         source: "elm";
         script {
            new v;
            v = get_int(sbalways_v);
            if (v) {
               set_int(sbalways_v, 0);
               v = get_int(sbvis_v);
               if (!v) {
                  emit("do-hide-vbar", "");
                  set_int(sbvis_v, 0);
               }
            }
         }
      }
      program { name: "sb_vbar_show";
         signal: "do-show-vbar";
         source: "";
         action:  STATE_SET "default" 0.0;
         transition: LINEAR 0.5;
         target: "sb_vbar_clip";
      }
      program { name: "sb_vbar_hide";
         signal: "do-hide-vbar";
         source: "";
         action:  STATE_SET "hidden" 0.0;
         transition: LINEAR 0.5;
         target: "sb_vbar_clip";
      }

      program { name: "hbar_show";
         signal: "elm,action,show,hbar";
         source: "elm";
         action:  STATE_SET "default" 0.0;
         target: "sb_hbar_clip_master";
      }
      program { name: "hbar_hide";
         signal: "elm,action,hide,hbar";
         source: "elm";
         action:  STATE_SET "hidden" 0.0;
         target: "sb_hbar_clip_master";
      }
      program { name: "hbar_show_always";
         signal: "elm,action,show_always,hbar";
         source: "elm";
         script {
            new v;
            v = get_int(sbvis_h);
            v |= get_int(sbalways_h);
            if (!v) {
               set_int(sbalways_h, 1);
               emit("do-show-hbar", "");
               set_int(sbvis_h, 1);
            }
         }
      }
      program { name: "hbar_show_notalways";
         signal: "elm,action,show_notalways,hbar";
         source: "elm";
         script {
            new v;
            v = get_int(sbalways_h);
            if (v) {
               set_int(sbalways_h, 0);
               v = get_int(sbvis_h);
               if (!v) {
                  emit("do-hide-hbar", "");
                  set_int(sbvis_h, 0);
               }
            }
         }
      }
      program { name: "sb_hbar_show";
         signal: "do-show-hbar";
         source: "";
         action:  STATE_SET "default" 0.0;
         transition: LINEAR 0.5;
         target: "sb_hbar_clip";
      }
      program { name: "sb_hbar_hide";
         signal: "do-hide-hbar";
         source: "";
         action:  STATE_SET "hidden" 0.0;
         transition: LINEAR 0.5;
         target: "sb_hbar_clip";
      }

      program { name: "scroll";
         signal: "elm,action,scroll";
         source: "elm";
         script {
            new v;
            v = get_int(sbvis_v);
            v |= get_int(sbalways_v);
            if (!v) {
               emit("do-show-vbar", "");
               set_int(sbvis_v, 1);
            }
            v = get_int(sbvis_h);
            v |= get_int(sbalways_h);
            if (!v) {
               emit("do-show-hbar", "");
               set_int(sbvis_h, 1);
            }
            v = get_int(sbvis_timer);
            if (v > 0) cancel_timer(v);
            v = timer(1.0, "timer0", 0);
            set_int(sbvis_timer, v);
         }
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "disabler";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "disabler";
      }
   }
}

group { name: "elm/gengrid/base/gallery";
   inherit: "elm/scroller/base/gallery";

   images {
      /*image: GALLERY_EDC_IMAGE_OS_TOP COMP;
      image: GALLERY_EDC_IMAGE_OS_BOTTOM COMP;*/
      image: GALLERY_EDC_IMAGE_OS_LEFT COMP;
      image: GALLERY_EDC_IMAGE_OS_RIGHT COMP;
   }

   parts {
      part { name: "shadow_clip";
         type: RECT;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
         }
         description { state: "hidden" 0.0;
            visible: 0;
            color: 255 255 255 0;
         }
      }
      /*part { name: "shadow_top";
         clip_to: "shadow_clip";
         type: IMAGE;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            min: 0 30;
            fixed: 1 1;
            align: 0.5 0.0;
            color: 255 255 255 100;
            rel1.relative: 0.0 0.0;
            rel2.relative: 1.0 0.0;
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
            image.normal: GALLERY_EDC_IMAGE_OS_TOP;
         }
         description { state: "edge" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 255;
         }
      }
      part { name: "shadow_bottom";
         clip_to: "shadow_clip";
         type: IMAGE;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            min: 0 30;
            fixed: 1 1;
            align: 0.5 1.0;
            color: 255 255 255 100;
            rel1.relative: 0.0 1.0;
            rel2.relative: 1.0 1.0;
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
            image.normal: GALLERY_EDC_IMAGE_OS_BOTTOM;
         }
         description { state: "edge" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 255;
         }
      }*/
      part { name: "shadow_left";
         clip_to: "shadow_clip";
         type: IMAGE;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            min: 30 0;
            fixed: 1 1;
            align: 0.0 0.5;
            color: 255 255 255 0;
            rel1.relative: 0.0 0.0;
            rel2.relative: 0.0 1.0;
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
            image.normal: GALLERY_EDC_IMAGE_OS_LEFT;
         }
         description { state: "edge" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 255;
         }
      }
      part { name: "shadow_right";
         clip_to: "shadow_clip";
         type: IMAGE;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            min: 30 0;
            fixed: 1 1;
            align: 1.0 0.5;
            color: 255 255 255 0;
            rel1.relative: 1.0 0.0;
            rel2.relative: 1.0 1.0;
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
            image.normal: GALLERY_EDC_IMAGE_OS_RIGHT;
         }
         description { state: "edge" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 255;
         }
      }
      /*part { name: "padding_jump_to_top";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: BUTTON_JUMP_TOP_PADDING_TO_SCROLLER_MIN_MAX_INC;
            max: BUTTON_JUMP_TOP_PADDING_TO_SCROLLER_MIN_MAX_INC;
            rel1.relative: 1.0 0.0;
            rel2.relative: 1.0 0.0;
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
            fixed: 1 1;
            align: 1.0 0.0;
         }
      }
      part { name: "elm.swallow.jump_to_top";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            rel1 {
               to: "padding_jump_to_top";
               relative: 0.0 1.0;
            }
            rel2 {
               to: "padding_jump_to_top";
               relative: 0.0 1.0;
            }
            fixed: 1 1;
            align: 1.0 0.0;
         }
      }
      part { name: "padding_jump_to_left";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: BUTTON_JUMP_LEFT_PADDING_TO_SCROLLER_MIN_MAX_INC;
            max: BUTTON_JUMP_LEFT_PADDING_TO_SCROLLER_MIN_MAX_INC;
            rel1.relative: 0.0 1.0;
            rel2.relative: 0.0 1.0;
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
            fixed: 1 1;
            align: 0.0 1.0;
         }
      }
      part { name: "elm.swallow.jump_to_left";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            rel1 {
               to: "padding_jump_to_left";
               relative: 1.0 0.0;
            }
            rel2 {
               to: "padding_jump_to_left";
               relative: 1.0 0.0;
            }
            fixed: 1 1;
            align: 0.0 1.0;
         }
      }*/
   }
   programs {
      program { name: "load";
         script {
            set_state(PART:"sb_hbar_clip", "hidden", 0.0);
            set_state(PART:"sb_vbar_clip", "hidden", 0.0);
            set_state(PART:"shadow_clip", "hidden", 0.0);
            set_int(sbvis_h, 0);
            set_int(sbvis_v, 0);
            set_int(sbalways_v, 0);
            set_int(sbalways_h, 0);
            set_int(sbvis_timer, 0);
            set_int(sh_v, 0);
            set_int(sh_timer, 0);
            set_int(edge_timer, 0);
         }
      }
      program { name: "vshadow_show";
         signal: "do-show-vshadow";
         source: "";
         action:  STATE_SET "default" 0.0;
         transition: LINEAR 0.5;
         target: "shadow_clip";
      }
      program { name: "vshadow_hide";
         signal: "do-hide-vshadow";
         source: "";
         action:  STATE_SET "hidden" 0.0;
         transition: LINEAR 0.5;
         target: "shadow_clip";
      }
      program { name: "scroll";
         signal: "elm,action,scroll";
         source: "elm";
         script {
            new v;
            v = get_int(sbvis_v);
            v |= get_int(sbalways_v);
            if (!v) {
               emit("do-show-vbar", "");
               set_int(sbvis_v, 1);
            }
            v = get_int(sbvis_h);
            v |= get_int(sbalways_h);
            if (!v) {
               emit("do-show-hbar", "");
               set_int(sbvis_h, 1);
            }
            v = get_int(sbvis_timer);
            if (v > 0) cancel_timer(v);
            v = timer(1, "timer0", 0);
            set_int(sbvis_timer, v);

            /*v = get_int(edge_timer);
            if (!v) {
               set_state(PART:"shadow_top", "default", 0.0);
               set_state(PART:"shadow_bottom", "default", 0.0);
               set_state(PART:"shadow_left", "default", 0.0);
               set_state(PART:"shadow_right", "default", 0.0);
               emit("do-show-vshadow", "");
               v = get_int(sh_timer);
               if (v > 0) cancel_timer(v);
               v = timer(0.2, "timer1", 0);
               set_int(sh_timer, v);
            }*/
         }
      }
      /*program { name: "edge_top";
         signal: "elm,edge,top";
         source: "elm";
         after: "edge";
      }
      program { name: "edge_bottom";
         signal: "elm,edge,bottom";
         source: "elm";
         after: "edge";
      }*/
      program { name: "edge_left";
         signal: "elm,edge,left";
         source: "elm";
         after: "edge_shadow_left";
      }
      program { name: "edge_right";
         signal: "elm,edge,right";
         source: "elm";
         after: "edge_shadow_right";
      }
      /*program { name: "edge";
         script {
            new v;
            v = get_int(sh_timer);
            if (v > 0) cancel_timer(v);
            set_state(PART:"shadow_top", "edge", 0.0);
            set_state(PART:"shadow_bottom", "edge", 0.0);
            set_state(PART:"shadow_left", "edge", 0.0);
            set_state(PART:"shadow_right", "edge", 0.0);
            v = get_int(edge_timer);
            if (!v) {
                emit("do-show-vshadow", "");
            }
            if (v > 0) cancel_timer(v);
            v = timer(0.2, "timer2", 0);
            set_int(edge_timer, v);
         }
      }*/
      program { name: "edge_shadow_left"; /* newly added */
         script {
            new v;
            v = get_int(sh_timer);
            if (v > 0) cancel_timer(v);
            set_state(PART:"shadow_left", "edge", 0.0);
            set_state(PART:"shadow_right", "default", 0.0);
            v = get_int(edge_timer);
            if (!v) {
                emit("do-show-vshadow", "");
            }
            if (v > 0) cancel_timer(v);
            v = timer(0.2, "timer2", 0);
            set_int(edge_timer, v);
         }
      }
      program { name: "edge_shadow_right"; /* newly added */
         script {
            new v;
            v = get_int(sh_timer);
            if (v > 0) cancel_timer(v);
            set_state(PART:"shadow_right", "edge", 0.0);
            set_state(PART:"shadow_left", "default", 0.0);
            v = get_int(edge_timer);
            if (!v) {
                emit("do-show-vshadow", "");
            }
            if (v > 0) cancel_timer(v);
            v = timer(0.2, "timer2", 0);
            set_int(edge_timer, v);
         }
      }
      program { name: "show";
         signal: "show";
         source: "";
         script {
            new v;
            emit("do-show-vbar", "");
            set_int(sbvis_v, 1);
            v = get_int(sbalways_v);
            if (!v) {
              v = get_int(sbvis_timer);
              if (v > 0) cancel_timer(v);
              v = timer(1.0, "timer0", 0);
              set_int(sbvis_timer, v);
            }
            emit("do-show-hbar", "");
            set_int(sbvis_h, 1);
            v = get_int(sbalways_h);
            if (!v) {
              v = get_int(sbvis_timer);
              if (v > 0) cancel_timer(v);
              v = timer(1.0, "timer0", 0);
              set_int(sbvis_timer, v);
            }
         }
      }
   }
}

