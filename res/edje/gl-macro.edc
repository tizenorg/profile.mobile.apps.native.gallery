/*
* Copyright (c) 2000-2015 Samsung Electronics Co., Ltd All Rights Reserved
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/

/********Used for showing overscrolling images start*********/

#define GL_CRIPT_SCROLLER \
	script { \
		public sbvis_v, sbvis_h, sbalways_v, sbalways_h, sbvis_timer; \
		public sh_v, sh_h, sh_timer, edge_timer; \
		public timer0(val) { \
			new v; \
			v = get_int(sbvis_v); \
			if (v) { \
				v = get_int(sbalways_v); \
				if (!v) { \
					emit("do-hide-vbar", ""); \
					set_int(sbvis_v, 0); \
				} \
			} \
			v = get_int(sbvis_h); \
			if (v) { \
				v = get_int(sbalways_h); \
				if (!v) { \
					emit("do-hide-hbar", ""); \
					set_int(sbvis_h, 0); \
				} \
			} \
			set_int(sbvis_timer, 0); \
			return 0; \
		} \
		public timer1(val) { \
			emit("do-hide-vshadow", ""); \
			emit("do-hide-hshadow", ""); \
			set_int(sh_timer, 0); \
			return 0; \
		} \
		public timer2(val) { \
			emit("do-hide-vshadow", ""); \
			emit("do-hide-hshadow", ""); \
			set_int(edge_timer, 0); \
			return 0; \
		} \
	}

#define GL_IMAGES_GRID_OVERSCROLL \
	images { \
		image: GALLERY_EDC_IMAGE_GIRD_OS_TOP COMP; \
		image: GALLERY_EDC_IMAGE_GIRD_OS_BOT COMP; \
		image: GALLERY_EDC_IMAGE_GIRD_OS_LEFT COMP; \
		image: GALLERY_EDC_IMAGE_GIRD_OS_RIGHT COMP; \
	}

#define GL_SHADOW_SCROLLER(CONTENT) \
	part { name: "vshadow_clip"; \
		type: RECT; \
		mouse_events: 0; \
		scale: 1; \
		description { state: "default" 0.0; \
		} \
		description { state: "hidden" 0.0; \
			visible: 0; \
			color: 255 255 255 0; \
		} \
	} \
	part { name: "hshadow_clip"; \
		type: RECT; \
		mouse_events: 0; \
		scale: 1; \
		description { state: "default" 0.0; \
		} \
		description { state: "hidden" 0.0; \
			visible: 0; \
			color: 255 255 255 0; \
		} \
	} \
	part { name: "shadow_top"; \
		clip_to: "vshadow_clip"; \
		type: IMAGE; \
		scale: 1; \
		mouse_events: 0; \
		description { state: "default" 0.0; \
			min: 0 405; \
			fixed: 1 1; \
			align: 0.5 0.0; \
			color: 255 255 255 100; \
			rel1.relative: 0.0 0.0; \
			rel2.relative: 1.0 0.0; \
			rel1.to: CONTENT; \
			rel2.to: CONTENT; \
			image.normal: GALLERY_EDC_IMAGE_GIRD_OS_TOP; \
		} \
		description { state: "edge" 0.0; \
			inherit: "default" 0.0; \
			color: 255 255 255 255; \
		} \
		description { state: "hidden" 0.0; \
			inherit: "default" 0.0; \
			visible: 0; \
		} \
	} \
	part { name: "shadow_bottom"; \
		clip_to: "vshadow_clip"; \
		type: IMAGE; \
		scale: 1; \
		mouse_events: 0; \
		description { state: "default" 0.0; \
			min: 0 405; \
			fixed: 1 1; \
			align: 0.5 1.0; \
			color: 255 255 255 100; \
			rel1.relative: 0.0 1.0; \
			rel2.relative: 1.0 1.0; \
			rel1.to: CONTENT; \
			rel2.to: CONTENT; \
			image.normal: GALLERY_EDC_IMAGE_GIRD_OS_BOT; \
		} \
		description { state: "edge" 0.0; \
			inherit: "default" 0.0; \
			color: 255 255 255 255; \
		} \
		description { state: "hidden" 0.0; \
			inherit: "default" 0.0; \
			visible: 0; \
		} \
	} \
	part { name: "shadow_left"; \
		clip_to: "hshadow_clip"; \
		type: IMAGE; \
		scale: 1; \
		mouse_events: 0; \
		description { state: "default" 0.0; \
			min: 405 0; \
			fixed: 1 1; \
			align: 0.0 0.5; \
			color: 255 255 255 100; \
			rel1.relative: 0.0 0.0; \
			rel2.relative: 0.0 1.0; \
			rel1.to: CONTENT; \
			rel2.to: CONTENT; \
			image.normal: GALLERY_EDC_IMAGE_GIRD_OS_LEFT; \
		} \
		description { state: "edge" 0.0; \
			inherit: "default" 0.0; \
			color: 255 255 255 255; \
		} \
		description { state: "hidden" 0.0; \
			inherit: "default" 0.0; \
			visible: 0; \
		} \
	} \
	part { name: "shadow_right"; \
		clip_to: "hshadow_clip"; \
		type: IMAGE; \
		scale: 1; \
		mouse_events: 0; \
		description { state: "default" 0.0; \
			min: 405 0; \
			fixed: 1 1; \
			align: 1.0 0.5; \
			color: 255 255 255 100; \
			rel1.relative: 1.0 0.0; \
			rel2.relative: 1.0 1.0; \
			rel1.to: CONTENT; \
			rel2.to: CONTENT; \
			image.normal: GALLERY_EDC_IMAGE_GIRD_OS_RIGHT; \
		} \
		description { state: "edge" 0.0; \
			inherit: "default" 0.0; \
			color: 255 255 255 255; \
		} \
		description { state: "hidden" 0.0; \
			inherit: "default" 0.0; \
			visible: 0; \
		} \
	}

#define GL_PROGRAM_SCROLLER \
	program { name: "load"; \
		signal: "load"; \
		source: ""; \
		script { \
			set_state(PART:"vshadow_clip", "hidden", 0.0); \
			set_state(PART:"hshadow_clip", "hidden", 0.0); \
			set_int(sbvis_h, 0); \
			set_int(sbvis_v, 0); \
			set_int(sbalways_v, 0); \
			set_int(sbalways_h, 0); \
			set_int(sbvis_timer, 0); \
			set_int(sh_timer, 0); \
			set_int(edge_timer, 0); \
			emit("reload", "elm"); \
		} \
	} \
	program { name: "vbar_show_always"; \
		signal: "elm,action,show_always,vbar"; \
		source: "elm"; \
		script { \
			new v; \
			v = get_int(sbvis_v); \
			v |= get_int(sbalways_v); \
			if (!v) { \
				set_int(sbalways_v, 1); \
				emit("do-show-vbar", ""); \
				set_int(sbvis_v, 1); \
			} \
		} \
	} \
	program { name: "vbar_show_notalways"; \
		signal: "elm,action,show_notalways,vbar"; \
		source: "elm"; \
		script { \
			new v; \
			v = get_int(sbalways_v); \
			if (v) { \
				set_int(sbalways_v, 0); \
				v = get_int(sbvis_v); \
				if (!v) { \
					emit("do-hide-vbar", ""); \
					set_int(sbvis_v, 0); \
				} \
			} \
		} \
	} \
	program { name: "hbar_show_always"; \
		signal: "elm,action,show_always,hbar"; \
		source: "elm"; \
		script { \
			new v; \
			v = get_int(sbvis_h); \
			v |= get_int(sbalways_h); \
			if (!v) { \
				set_int(sbalways_h, 1); \
				emit("do-show-hbar", ""); \
				set_int(sbvis_h, 1); \
			 } \
		} \
	} \
	program { name: "hbar_show_notalways"; \
		signal: "elm,action,show_notalways,hbar"; \
		source: "elm"; \
		script { \
			new v; \
			v = get_int(sbalways_h); \
			if (v) { \
				set_int(sbalways_h, 0); \
				v = get_int(sbvis_h); \
				if (!v) { \
					emit("do-hide-hbar", ""); \
					set_int(sbvis_h, 0); \
				} \
			} \
		} \
	} \
	program { name: "vshadow_show"; \
		signal: "do-show-vshadow"; \
		source: ""; \
		action:  STATE_SET "default" 0.0; \
		transition: LINEAR 0.5; \
		target: "vshadow_clip"; \
	} \
	program { name: "vshadow_hide"; \
		signal: "do-hide-vshadow"; \
		source: ""; \
		action:  STATE_SET "hidden" 0.0; \
		transition: LINEAR 0.5; \
		target: "vshadow_clip"; \
	} \
	program { name: "hshadow_show"; \
		signal: "do-show-hshadow"; \
		source: ""; \
		action:  STATE_SET "default" 0.0; \
		transition: LINEAR 0.5; \
		target: "hshadow_clip"; \
	} \
	program { name: "hshadow_hide"; \
		signal: "do-hide-hshadow"; \
		source: ""; \
		action:  STATE_SET "hidden" 0.0; \
		transition: LINEAR 0.5; \
		target: "hshadow_clip"; \
	} \
	program { name: "scroll"; \
		signal: "elm,action,scroll"; \
		source: "elm"; \
		script { \
			new v; \
			v = get_int(sbvis_v); \
			v |= get_int(sbalways_v); \
			if (!v) { \
				emit("do-show-vbar", ""); \
				set_int(sbvis_v, 1); \
			} \
			v = get_int(sbvis_h); \
			v |= get_int(sbalways_h); \
			if (!v) { \
				emit("do-show-hbar", ""); \
				set_int(sbvis_h, 1); \
			} \
			v = get_int(sbvis_timer); \
			if (v > 0) \
				cancel_timer(v); \
			v = timer(1, "timer0", 0); \
			set_int(sbvis_timer, v); \
		} \
	} \
	program { name: "scroll_up"; \
		signal: "elm,action,scroll,up"; \
		source: "elm"; \
		after: "scroll_vertical"; \
	} \
	program { name: "scroll_down"; \
		signal: "elm,action,scroll,down"; \
		source: "elm"; \
		after: "scroll_vertical"; \
	} \
	program { name: "scroll_vertical"; \
		script { \
			new v; \
			v = get_int(edge_timer); \
			if (!v) { \
				set_state(PART:"shadow_top", "default", 0.0); \
				set_state(PART:"shadow_bottom", "default", 0.0); \
				emit("do-show-vshadow", ""); \
				v = get_int(sh_timer); \
				if (v > 0) \
					cancel_timer(v); \
				v = timer(0.2, "timer1", 0); \
				set_int(sh_timer, v); \
			} \
		} \
	} \
	program { name: "scroll_left"; \
		signal: "elm,action,scroll,left"; \
		source: "elm"; \
		after: "scroll_horizontal"; \
	} \
	program { name: "scroll_right"; \
		signal: "elm,action,scroll,right"; \
		source: "elm"; \
		after: "scroll_horizontal"; \
	} \
	program { name: "scroll_horizontal"; \
		script { \
			new v; \
			v = get_int(edge_timer); \
			if (!v) { \
				set_state(PART:"shadow_left", "default", 0.0); \
				set_state(PART:"shadow_right", "default", 0.0); \
				emit("do-show-hshadow", ""); \
				v = get_int(sh_timer); \
				if (v > 0) \
					cancel_timer(v); \
				v = timer(0.2, "timer1", 0); \
				set_int(sh_timer, v); \
			} \
		} \
	} \
	program { name: "edge_top"; \
		signal: "elm,edge,top"; \
		source: "elm"; \
		script { \
			set_state(PART:"shadow_top", "edge", 0.0); \
			set_state(PART:"shadow_bottom", "hidden", 0.0); \
		} \
		after: "edge_vertical"; \
	} \
	program { name: "edge_bottom"; \
		signal: "elm,edge,bottom"; \
		source: "elm"; \
		script { \
			set_state(PART:"shadow_top", "hidden", 0.0); \
			set_state(PART:"shadow_bottom", "edge", 0.0); \
		} \
		after: "edge_vertical"; \
	} \
	program { name: "edge_left"; \
		signal: "elm,edge,left"; \
		source: "elm"; \
		script { \
			set_state(PART:"shadow_left", "edge", 0.0); \
			set_state(PART:"shadow_right", "hidden", 0.0); \
		} \
		after: "edge_horizontal"; \
	} \
	program { name: "edge_right"; \
		signal: "elm,edge,right"; \
		source: "elm"; \
		script { \
			set_state(PART:"shadow_left", "hidden", 0.0); \
			set_state(PART:"shadow_right", "edge", 0.0); \
		} \
		after: "edge_horizontal"; \
	} \
	program { name: "edge_all"; \
		signal: "elm,edge,all"; \
		source: "elm"; \
		script { \
			set_state(PART:"shadow_top", "edge", 0.0); \
			set_state(PART:"shadow_bottom", "edge", 0.0); \
			set_state(PART:"shadow_left", "edge", 0.0); \
			set_state(PART:"shadow_right", "edge", 0.0); \
		} \
		after: "edge_hori_verti"; \
	} \
	program { name: "edge_vertical"; \
		script { \
			new v; \
			v = get_int(sh_timer); \
			if (v > 0) \
				cancel_timer(v); \
			v = get_int(edge_timer); \
			if (!v) { \
				emit("do-show-vshadow", ""); \
			} \
			if (v > 0) \
				cancel_timer(v); \
			v = timer(0.2, "timer2", 0); \
			set_int(edge_timer, v); \
		} \
	} \
	program { name: "edge_horizontal"; \
		script { \
			new v; \
			v = get_int(sh_timer); \
			if (v > 0) \
				cancel_timer(v); \
			v = get_int(edge_timer); \
			if (!v) { \
				emit("do-show-hshadow", ""); \
			} \
			if (v > 0) \
				cancel_timer(v); \
			v = timer(0.2, "timer2", 0); \
			set_int(edge_timer, v); \
		} \
	} \
	program { name: "edge_hori_verti"; \
		script { \
			new v; \
			v = get_int(sh_timer); \
			if (v > 0) \
				cancel_timer(v); \
			v = get_int(edge_timer); \
			if (!v) { \
				emit("do-show-hshadow", ""); \
				emit("do-show-vshadow", ""); \
			} \
			if (v > 0) \
				cancel_timer(v); \
			v = timer(0.2, "timer2", 0); \
			set_int(edge_timer, v); \
		} \
	} \
	program { name: "show"; \
		signal: "show"; \
		source: ""; \
		script { \
			new v; \
			emit("do-show-vbar", ""); \
			set_int(sbvis_v, 1); \
			v = get_int(sbalways_v); \
			if (!v) { \
				v = get_int(sbvis_timer); \
				if (v > 0) cancel_timer(v); \
				v = timer(1.0, "timer0", 0); \
				set_int(sbvis_timer, v); \
			} \
			emit("do-show-hbar", ""); \
			set_int(sbvis_h, 1); \
			v = get_int(sbalways_h); \
			if (!v) { \
				v = get_int(sbvis_timer); \
				if (v > 0) cancel_timer(v); \
				v = timer(1.0, "timer0", 0); \
				set_int(sbvis_timer, v); \
			} \
		} \
	}
/********Used for showing overscrolling images done*********/

