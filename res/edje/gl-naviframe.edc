/*
* Copyright (c) 2000-2015 Samsung Electronics Co., Ltd All Rights Reserved
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/

#define NAVIFRAME_VIEW_TRANS_TIME 0.3
#define NAVIFRAME_TITLE_TRANS_TIME 0.5

group { name: "elm/naviframe/item/gallery_empty/default";
   script {
      public tbar_close = 0; //Toolbar lastest Open/Close status
      public landscape = 0; //Landscape mode status
   }
   parts {
      part { name: "clipper";
	 type: RECT;
	 description { state: "default" 0.0;
	    visible: 1;
	 }
	 description { state: "left" 0.0;
	    visible: 0;
	 }
      }
      part { name: "base";
	 type: RECT;
	 scale: 1;
	 mouse_events:	0;
	 description { state: "default" 0.0;
	    visible: 0;
	 }
	 description { state: "left" 0.0;
	    inherit: "default" 0.0;
	    rel1.relative: -1.0 0.0;
	    rel2.relative: 0.0 1.0;
	 }
	 description { state: "right" 0.0;
	    inherit: "default" 0.0;
	    rel1.relative: 1.0 0.0;
	    rel2.relative: 2.0 1.0;
	 }
      }
      part { name: "title_bg";
	 type: RECT;
	 scale: 1;
	 description { state: "default" 0.0;
	    min: 0 NAVIFRAME_TITLE_H_INC;
	    max: -1 NAVIFRAME_TITLE_H_INC;
	    align: 0.0 0.0;
	    fixed: 0 1;
	    rel1 { relative: 0.0 0.0; to: "base"; }
	    rel2 { relative: 1.0 0.0; to: "base"; }
	 }
	 description { state: "landscape" 0.0;
	    inherit: "default" 0.0;
	    min: 0 NAVIFRAME_LANDSCAPE_TITLE_H_INC;
	    max: -1 NAVIFRAME_LANDSCAPE_TITLE_H_INC;
	 }
	 description { state: "hide_trans" 0.0;
	    inherit: "default" 0.0;
	    align: 0.5 1.0;
	 }
	 description { state: "hide_trans_landscape" 0.0;
	    inherit: "landscape" 0.0;
	    align: 0.5 1.0;
	 }
	 description { state: "hide" 0.0;
	    inherit: "default" 0.0;
	    visible: 0;
	    min: 0 0;
	    max: -1 0;
	 }
      }
      part { name: "title_clip";
	 type: RECT;
	 mouse_events: 0;
	 clip_to: "clipper";
	 description { state: "default" 0.0;
	    rel1 { to_y: "title_bg"; }
	    rel2 { to_y: "title_bg"; }
	 }
      }
      part { name: "elm.swallow.content";
	 type: SWALLOW;
	 scale: 1;
	 repeat_events: 0;
	 clip_to: "content_clip";
	 description { state: "default" 0.0;
	    align: 0.0 0.0;
	    rel1.relative: 0.0 1.0;
	    rel1.to_x: "base";
	    rel1.to_y: "title_bg";
	    rel2.relative: 1.0 0.0;
	    rel2.to_x: "base";
	    rel2.to_y: "toolbar";
	 }
      }
      part { name: "content_clip";
	 type: RECT;
	 scale: 1;
	 mouse_events: 0;
	 clip_to: "clipper";
	 description { state: "default" 0.0;
	    rel1.to: "elm.swallow.content";
	    rel2.to: "elm.swallow.content";
	 }
      }
      part { name: "title";
	 type: SWALLOW;
	 scale: 1;
	 clip_to: "title_clip";
	 description { state: "default" 0.0;
	    min: 0 NAVIFRAME_TITLE_H_INC;
	    max: -1 NAVIFRAME_TITLE_H_INC;
	    align: 0.0 0.0;
	    fixed: 0 1;
	    rel1 { relative: 0.0 0.0; to: "base"; }
	    rel2 { relative: 1.0 0.0; to: "base"; }
	 }
	 description { state: "landscape" 0.0;
	    inherit: "default" 0.0;
	    min: 0 NAVIFRAME_LANDSCAPE_TITLE_H_INC;
	    max: -1 NAVIFRAME_LANDSCAPE_TITLE_H_INC;
	 }
	 description { state: "hide_trans" 0.0;
	    inherit: "default" 0.0;
	    align: 0.5 1.0;
	 }
	 description { state: "hide_trans_landscape" 0.0;
	    inherit: "landscape" 0.0;
	    align: 0.5 1.0;
	 }
	 description { state: "hide" 0.0;
	    inherit: "default" 0.0;
	    visible: 0;
	    min: 0 0;
	    max: -1 0;
	 }
      }
      part { name: "toolbar";
	 type: SWALLOW;
	 scale: 1;
	 clip_to: "toolbar_clip";
	 description { state: "default" 0.0;
	    min: 0 0;
	    max: 999999 0;
	    fixed: 0 1;
	    align: 0.0 1.0;
	    visible: 0;
	    rel1 { to: "base"; }
	    rel2 { to: "base"; }
	 }
	 description { state: "visible" 0.0;
	    inherit: "default" 0.0;
	    min: 0 NAVIFRAME_TOOLBAR_HEIGHT_INC;
	    max: 999999 NAVIFRAME_TOOLBAR_HEIGHT_INC;
	    visible: 1;
	 }
	 description { state: "visible_landscape" 0.0;
	    inherit: "default" 0.0;
	    min: 0 NAVIFRAME_LANDSCAPE_TOOLBAR_HEIGHT_INC;
	    max: 999999 NAVIFRAME_LANDSCAPE_TOOLBAR_HEIGHT_INC;
	    visible: 1;
	 }
      }
      part { name: "more_btn_bg";
	 type: SPACER;
	 scale: 1;
	 description { state: "default" 0.0;
	    min: NAVIFRAME_TOOLBAR_BUTTON_BG_PADDING_INC;
	    fixed: 1 0;
	    align: 0.0 0.0;
	    rel1 { relative: 0.0 0.0; to: "toolbar"; }
	    rel2 { relative: 0.0 1.0; to: "toolbar"; }
	 }
      }
      part { name: "toolbar_more_btn";
	 type: SWALLOW;
	 scale: 1;
	 clip_to: "toolbar_clip";
	 description { state: "default" 0.0;
	    max: NAVIFRAME_PREV_FUNC_BTN_SIZE_INC;
	    fixed: 1 1;
	    rel1.to: "more_btn_bg";
	    rel2.to: "more_btn_bg";
	    visible: 0;
	 }
	 description { state: "landscape" 0.0;
	    inherit: "default" 0.0;
	    max: NAVIFRAME_LANDSCAPE_PREV_FUNC_BTN_SIZE_INC;
	 }
      }
      part { name: "prev_btn_bg";
	 type: SPACER;
	 scale: 1;
	 description { state: "default" 0.0;
	    min: NAVIFRAME_TOOLBAR_BUTTON_BG_PADDING_INC;
	    fixed: 1 0;
	    align: 1.0 0.0;
	    rel1 { relative: 1.0 0.0; to: "toolbar"; }
	    rel2.to: "toolbar";
	 }
      }
      part { name: "elm.swallow.prev_btn";
	 type: SWALLOW;
	 scale: 1;
	 clip_to: "toolbar_clip";
	 description { state: "default" 0.0;
	    max: NAVIFRAME_PREV_FUNC_BTN_SIZE_INC;
	    fixed: 1 1;
	    align: 0.5 0.5;
	    rel1.to: "prev_btn_bg";
	    rel2.to: "prev_btn_bg";
	    visible: 0;
	 }
	 description { state: "landscape" 0.0;
	    inherit: "default" 0.0;
	    max: NAVIFRAME_LANDSCAPE_PREV_FUNC_BTN_SIZE_INC;
	 }
      }
      part { name: "toolbar_clip";
	 type: RECT;
	 mouse_events: 0;
	 clip_to: "clipper";
	 description { state: "default" 0.0;
	    rel1 { to: "toolbar"; }
	    rel2 { to: "toolbar"; }
	 }
      }
   }
   programs {
      program { name: "content_new_pushed";
	 signal: "elm,state,new,pushed,deferred";
	 source: "elm";
	 action: STATE_SET "default" 0.0;
	 target: "base";
	 transition: DECELERATE NAVIFRAME_VIEW_TRANS_TIME;
	 after: "show_finished";
      }
      program { name: "content_cur_pushed";
	 signal: "elm,state,cur,pushed,deferred";
	 source: "elm";
	 action: STATE_SET "left" 0.0;
	 target: "base";
	 target: "clipper";
	 transition: DECELERATE NAVIFRAME_VIEW_TRANS_TIME;
	 after: "pushed_finished";
      }
      program { name: "content_prev_popped";
	 signal: "elm,state,prev,popped,deferred";
	 source: "elm";
	 action: STATE_SET "default" 0.0;
	 target: "base";
	 target: "clipper";
	 transition: DECELERATE NAVIFRAME_VIEW_TRANS_TIME;
	 after: "show_finished";
      }
      program { name: "content_cur_popped";
	 signal: "elm,state,cur,popped,deferred";
	 source: "elm";
	 action: STATE_SET "right" 0.0;
	 target: "base";
	 transition: DECELERATE NAVIFRAME_VIEW_TRANS_TIME;
	 after: "popped_finished";
      }
      program { name: "cur_pushed";
	 signal: "elm,state,cur,pushed";
	 source: "elm";
	 action: STATE_SET "default" 0.0;
	 target: "base";
      }
      program { name: "new_pushed";
	 signal: "elm,state,new,pushed";
	 source: "elm";
	 action: STATE_SET "right" 0.0;
	 target: "base";
      }
      program { name: "prev_popped";
	 signal: "elm,state,prev,popped";
	 source: "elm";
	 action: STATE_SET "left" 0.0;
	 target: "base";
      }
      program { name: "cur_popped";
	 signal: "elm,state,cur,popped";
	 source: "elm";
	 action: STATE_SET "default" 0.0;
	 target: "base";
      }
      program { name: "visible";
	 signal: "elm,state,visible";
	 source: "elm";
	 action: STATE_SET "default" 0.0;
	 target: "base";
	 target: "clipper";
      }
      program { name: "title_show";
	 signal: "elm,state,title,show";
	 source: "elm";
	 script {
	    if (!get_int(landscape)) {
	       set_state(PART:"title", "default", 0.0);
	       set_state(PART:"title_bg", "default", 0.0);
	    } else {
	       set_state(PART:"title", "landscape", 0.0);
	       set_state(PART:"title_bg", "landscape", 0.0);
	    }
	 }
      }
      program { name: "title_hide";
	 signal: "elm,state,title,hide";
	 source: "elm";
	 script {
	    set_state(PART:"title_bg", "hide", 0.0);
	    set_state(PART:"title", "hide", 0.0);
	 }
      }
      program { name: "title_show_anim";
	 signal: "elm,action,title,show";
	 source: "elm";
	 script {
	    if (!get_int(landscape)) {
		    set_state(PART:"title", "hide_trans", 0.0);
		    set_state(PART:"title_bg", "hide_trans", 0.0);
	    } else {
	       set_state(PART:"title", "hide_trans_landscape", 0.0);
	       set_state(PART:"title_bg", "hide_trans_landscape", 0.0);
	    }
	    run_program(PROGRAM:"title_show_anim_start");
	 }
      }
      program { name: "title_show_anim_start";
	 action: STATE_SET "default" 0.0;
	 target: "title";
	 target: "title_bg";
	 transition: SIN_FAC NAVIFRAME_TITLE_TRANS_TIME 1.7;
	 after: "title_show_anim_finished";
      }
      program { name: "title_show_anim_finished";
	 script {
	    emit("elm,action,title,transition,finished", "");
	 }
      }
      program { name: "title_hide_trans";
	 signal: "elm,action,title,hide";
	 source: "elm";
	 script {
	    if (!get_int(landscape)) {
	       set_state(PART:"title", "default", 0.0);
	       set_state(PART:"title_bg", "default", 0.0);
	    } else {
	       set_state(PART:"title", "landscape", 0.0);
	       set_state(PART:"title_bg", "landscape", 0.0);
	    }
	    run_program(PROGRAM:"title_hide_trans_start");
	 }
      }
      program { name: "title_hide_trans_start";
	 action: STATE_SET "hide_trans" 0.0;
	 target: "title";
	 target: "title_bg";
	 transition: SIN_FAC NAVIFRAME_TITLE_TRANS_TIME 1.7;
	 after: "title_hide_trans_finished";
      }
      program { name: "title_hide_trans_finished";
	 script {
	    set_state(PART:"title_bg", "hide", 0.0);
	    set_state(PART:"title", "hide", 0.0);
	    emit("elm,action,title,transition,finished", "");
	 }
      }
      program { name: "toolbar_show";
	 signal: "elm,state,toolbar,show";
	 source: "elm";
	 script {
	    if (!get_int(landscape))
	      set_state(PART:"toolbar", "visible", 0.0);
	    else
	      set_state(PART:"toolbar", "visible_landscape", 0.0);
	 }
      }
      program { name: "toolbar_hide";
	 signal: "elm,state,toolbar,hide";
	 source: "elm";
	 script {
	    set_state(PART:"toolbar", "default", 0.0);
	 }
      }
      program { name: "toolbar_open_internal";
	 signal: "elm,state,toolbar,open,internal";
	 source: "elm";
	 script {
	    set_int(tbar_close, 0);
	    if (!get_int(landscape))
	      set_state(PART:"toolbar", "visible", 0.0);
	    else
	      set_state(PART:"toolbar", "visible_landscape", 0.0);
	 }
      }
      program { name: "toolbar_close_internal";
	 signal: "elm,state,toolbar,close,internal";
	 source: "elm";
	 script {
	    set_int(tbar_close, 1);
	    set_state(PART:"toolbar", "default", 0.0);
	 }
      }
      program { name: "toolbar_open";
	 signal: "elm,state,toolbar,open";
	 source: "";
	 script {
	    if (!get_int(landscape))
	      set_state(PART:"toolbar", "visible", 0.0);
	    else
	      set_state(PART:"toolbar", "visible_landscape", 0.0);
	 }
	 transition: LINEAR 0.2;
	 after: "toolbar_open_internal";
      }
      program { name: "toolbar_close";
	 signal: "elm,state,toolbar,close";
	 source: "";
	 action: STATE_SET "default" 0.0;
	 target: "toolbar";
	 transition: LINEAR 0.2;
	 after: "toolbar_close_internal";
      }
      program { name: "toolbar_instant_open";
	 signal: "elm,state,toolbar,instant_open";
	 source: "";
	 script {
	    emit("elm,state,toolbar,open,internal", "elm");
	 }
      }
      program { name: "toolbar_instant_close";
	 signal: "elm,state,toolbar,instant_close";
	 source: "";
	 script {
	    emit("elm,state,toolbar,close,internal", "elm");
	 }
      }
      program { name: "show_finished";
	 action: SIGNAL_EMIT "elm,action,show,finished" "";
      }
      program { name: "pushed_finished";
	 action: SIGNAL_EMIT "elm,action,pushed,finished" "";
      }
      program { name: "popped_finished";
	 action: SIGNAL_EMIT "elm,action,popped,finished" "";
      }
      program {
	 name: "change_to_landscape";
	 script {
	    if (!get_int(landscape)) {
	       set_state(PART:"toolbar_more_btn", "landscape", 0.0);
	       set_state(PART:"elm.swallow.prev_btn", "landscape", 0.0);

	       new st[31];
	       new Float:vl;
	       get_state(PART:"title", st, 30, vl);
	       if (!strcmp(st, "default"))
		 set_state(PART:"title", "landscape", 0.0);
	       get_state(PART:"title_bg", st, 30, vl);
	       if (!strcmp(st, "default"))
		 set_state(PART:"title_bg", "landscape", 0.0);

	       get_state(PART:"toolbar", st, 30, vl);
	       if (!strcmp(st, "visible"))
		 set_state(PART:"toolbar", "visible_landscape", 0.0);

	       set_int(landscape, 1);
	    }
	 }
      }
      program {
	 name: "change_to_portrait";
	 script {
	    if (get_int(landscape)) {
	       set_state(PART:"toolbar_more_btn", "default", 0.0);
	       set_state(PART:"elm.swallow.prev_btn", "default", 0.0);

	       new st[31];
	       new Float:vl;
	       get_state(PART:"title", st, 30, vl);
	       if (!strcmp(st, "landscape"))
		 set_state(PART:"title", "default", 0.0);
	       get_state(PART:"title_bg", st, 30, vl);
	       if (!strcmp(st, "landscape"))
		 set_state(PART:"title_bg", "default", 0.0);

	       get_state(PART:"toolbar", st, 30, vl);
	       if (!strcmp(st, "visible_landscape"))
		 set_state(PART:"toolbar", "visible", 0.0);

	       set_int(landscape, 0);
	    }
	 }
      }
      program { name: "landscape_mode";
	 source: "elm";
	 signal: "elm,state,orient,90";
	 after: "change_to_landscape";
      }
      program { name: "landscape_mode2";
	 source: "elm";
	 signal: "elm,state,orient,270";
	 after: "change_to_landscape";
      }
      program { name: "portrait_mode";
	 source: "elm";
	 signal: "elm,state,orient,0";
	 after: "change_to_portrait";
      }
      program { name: "portrait_mode2";
	 source: "elm";
	 signal: "elm,state,orient,180";
	 after: "change_to_portrait";
      }
   }
}
